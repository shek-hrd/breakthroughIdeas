<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zenkimi - Project Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        h1 {
            color: #333;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .input-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        
        input[type="text"],
        textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        input[type="text"]:focus,
        textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        input[type="text"].nickname-input {
            width: 200px;
            display: inline-block;
            margin-right: 10px;
        }
        
        .debossed {
            color: #999;
            font-style: italic;
        }
        
        .debossed::placeholder {
            color: #ccc;
        }
        
        button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: transform 0.2s;
        }
        
        button:hover {
            transform: translateY(-2px);
        }
        
        .projects-section {
            margin-bottom: 30px;
        }
        
        .project-item {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }
        
        .project-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }
        
        .project-meta {
            display: flex;
            align-items: flex-start;
            gap: 5px;
            font-size: 12px;
            color: #666;
        }
        
        .nickname {
            font-family: 'Courier New', monospace;
            color: #667eea;
        }
        
        .timestamp {
            font-family: 'Courier New', monospace;
            color: #999;
        }
        
        .project-description {
            color: #555;
            line-height: 1.5;
            margin-bottom: 10px;
        }
        
        .comments-section {
            border-top: 1px solid #eee;
            padding-top: 10px;
        }
        
        .comment-item {
            display: flex;
            align-items: flex-start;
            gap: 5px;
            margin-bottom: 8px;
            font-size: 13px;
        }
        
        .comment-nickname {
            font-family: 'Courier New', monospace;
            color: #667eea;
            white-space: nowrap;
        }
        
        .comment-text {
            color: #666;
            flex: 1;
        }
        
        .comment-form {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .comment-input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 13px;
        }
        
        .log-section {
            background: #1a1a1a;
            color: #00ff00;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .log-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            cursor: pointer;
        }
        
        .log-toggle {
            background: #333;
            color: #00ff00;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .log-content {
            display: none;
        }
        
        .log-content.expanded {
            display: block;
        }
        
        .log-entry {
            margin-bottom: 8px;
            padding: 5px;
            background: rgba(0,255,0,0.05);
            border-left: 3px solid #00ff00;
        }
        
        .log-timestamp {
            color: #ff6b6b;
            margin-right: 10px;
        }
        
        .log-action {
            color: #4ecdc4;
            margin-right: 10px;
        }
        
        .log-details {
            color: #95e1d3;
            margin-left: 20px;
        }
        
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Zenkimi Project Manager</h1>
        
        <div class="input-section">
            <div class="form-group">
                <label for="nickname">Nickname:</label>
                <input type="text" id="nickname" class="nickname-input debossed" placeholder="<nickname>">
            </div>
            
            <div class="form-group">
                <label for="projectTitle">Project Title:</label>
                <input type="text" id="projectTitle" placeholder="Enter project title...">
            </div>
            
            <div class="form-group">
                <label for="projectDescription">Description:</label>
                <textarea id="projectDescription" rows="4" placeholder="Describe your project..."></textarea>
            </div>
            
            <button onclick="addProject()">Add Project</button>
        </div>
        
        <div class="projects-section">
            <h2>Projects</h2>
            <div id="projectsList"></div>
        </div>
        
        <div class="log-section">
            <div class="log-header" onclick="toggleLog()">
                <h3>Access & Change Log</h3>
                <button class="log-toggle" id="logToggle">Show</button>
            </div>
            <div class="log-content" id="logContent"></div>
        </div>
    </div>

    <script>
        // Initialize data storage
        let projects = JSON.parse(localStorage.getItem('projects')) || [];
        let logs = JSON.parse(localStorage.getItem('logs')) || [];
        let currentNickname = localStorage.getItem('nickname') || '';

        // Set nickname if exists
        if (currentNickname) {
            document.getElementById('nickname').value = currentNickname;
            document.getElementById('nickname').classList.remove('debossed');
        }

        // Save nickname when changed
        document.getElementById('nickname').addEventListener('change', function() {
            const nickname = this.value.trim();
            localStorage.setItem('nickname', nickname);
            if (nickname) {
                this.classList.remove('debossed');
            } else {
                this.classList.add('debossed');
            }
        });

        // Get user details
        async function getUserDetails() {
            const details = {
                userAgent: navigator.userAgent,
                language: navigator.language,
                platform: navigator.platform,
                cookies: document.cookie || 'No cookies',
                timestamp: new Date().toISOString(),
                url: window.location.href,
                referrer: document.referrer || 'Direct access',
                screenResolution: `${screen.width}x${screen.height}`,
                viewport: `${window.innerWidth}x${window.innerHeight}`,
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                memory: navigator.deviceMemory || 'Unknown',
                cores: navigator.hardwareConcurrency || 'Unknown',
                online: navigator.onLine,
                connection: navigator.connection ? {
                    effectiveType: navigator.connection.effectiveType,
                    downlink: navigator.connection.downlink,
                    rtt: navigator.connection.rtt
                } : 'Not available'
            };

            // Get IP and location
            try {
                const response = await fetch('https://ipapi.co/json/');
                const data = await response.json();
                details.ip = data.ip;
                details.location = {
                    city: data.city,
                    region: data.region,
                    country: data.country_name,
                    lat: data.latitude,
                    lon: data.longitude,
                    isp: data.org
                };
            } catch (error) {
                details.ipError = error.message;
            }

            return details;
        }

        // Log activity
        async function logActivity(action, details = '') {
            const userDetails = await getUserDetails();
            const logEntry = {
                id: Date.now(),
                action: action,
                details: details,
                userDetails: userDetails,
                timestamp: new Date().toISOString()
            };
            
            logs.unshift(logEntry);
            if (logs.length > 100) logs = logs.slice(0, 100); // Keep only last 100 logs
            localStorage.setItem('logs', JSON.stringify(logs));
            displayLogs();
        }

        // Display logs
        function displayLogs() {
            const logContent = document.getElementById('logContent');
            logContent.innerHTML = '';
            
            logs.forEach(log => {
                const logDiv = document.createElement('div');
                logDiv.className = 'log-entry';
                
                const timestamp = new Date(log.timestamp).toLocaleString();
                const nickname = log.userDetails.nickname || 'Anonymous';
                
                logDiv.innerHTML = `
                    <div>
                        <span class="log-timestamp">${timestamp}</span>
                        <span class="log-action">${log.action}</span>
                        <span class="nickname">${nickname}</span>
                    </div>
                    <div class="log-details">
                        IP: ${log.userDetails.ip || 'Unknown'} | 
                        Location: ${log.userDetails.location ? 
                            `${log.userDetails.location.city}, ${log.userDetails.location.country}` : 
                            'Unknown'} |
                        Browser: ${log.userDetails.userAgent.split(' ').find(word => 
                            word.includes('Chrome') || word.includes('Firefox') || 
                            word.includes('Safari') || word.includes('Edge')) || 'Unknown'} |
                        ${log.details}
                    </div>
                `;
                
                logContent.appendChild(logDiv);
            });
        }

        // Add project
        async function addProject() {
            const nickname = document.getElementById('nickname').value.trim();
            const title = document.getElementById('projectTitle').value.trim();
            const description = document.getElementById('projectDescription').value.trim();
            
            if (!title) {
                alert('Please enter a project title');
                return;
            }
            
            const project = {
                id: Date.now(),
                title: title,
                description: description,
                nickname: nickname || '',
                timestamp: new Date().toISOString(),
                comments: []
            };
            
            projects.unshift(project);
            localStorage.setItem('projects', JSON.stringify(projects));
            
            // Clear form
            document.getElementById('projectTitle').value = '';
            document.getElementById('projectDescription').value = '';
            
            // Log activity
            await logActivity('Project Added', `Project: ${title}`);
            
            displayProjects();
        }

        // Add comment
        async function addComment(projectId) {
            const nickname = document.getElementById('nickname').value.trim();
            const commentInput = document.getElementById(`comment-${projectId}`);
            const commentText = commentInput.value.trim();
            
            if (!commentText) {
                alert('Please enter a comment');
                return;
            }
            
            const project = projects.find(p => p.id === projectId);
            if (project) {
                const comment = {
                    id: Date.now(),
                    text: commentText,
                    nickname: nickname || '',
                    timestamp: new Date().toISOString()
                };
                
                project.comments.push(comment);
                localStorage.setItem('projects', JSON.stringify(projects));
                
                // Clear input
                commentInput.value = '';
                
                // Log activity
                await logActivity('Comment Added', `Project: ${project.title}, Comment: ${commentText.substring(0, 50)}...`);
                
                displayProjects();
            }
        }

        // Display projects
        function displayProjects() {
            const projectsList = document.getElementById('projectsList');
            projectsList.innerHTML = '';
            
            if (projects.length === 0) {
                projectsList.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">No projects yet. Add your first project above!</p>';
                return;
            }
            
            projects.forEach(project => {
                const projectDiv = document.createElement('div');
                projectDiv.className = 'project-item';
                
                const timestamp = new Date(project.timestamp).toLocaleString();
                
                projectDiv.innerHTML = `
                    <div class="project-header">
                        <div class="project-title">${project.title}</div>
                        <div class="project-meta">
                            <span class="nickname">${project.nickname || ''}</span>
                            <span class="timestamp">${timestamp}</span>
                        </div>
                    </div>
                    <div class="project-description">${project.description || 'No description provided'}</div>
                    <div class="comments-section">
                        <div id="comments-${project.id}">
                            ${project.comments.map(comment => {
                                const commentTime = new Date(comment.timestamp).toLocaleString();
                                return `
                                    <div class="comment-item">
                                        <span class="comment-nickname">${comment.nickname || ''}</span>
                                        <span class="comment-text">${comment.text}</span>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                        <div class="comment-form">
                            <input type="text" id="comment-${project.id}" class="comment-input debossed" placeholder="Add your comment...">
                            <button onclick="addComment(${project.id})">Comment</button>
                        </div>
                    </div>
                `;
                
                projectsList.appendChild(projectDiv);
            });
        }

        // Toggle log visibility
        function toggleLog() {
            const logContent = document.getElementById('logContent');
            const logToggle = document.getElementById('logToggle');
            
            if (logContent.classList.contains('expanded')) {
                logContent.classList.remove('expanded');
                logToggle.textContent = 'Show';
            } else {
                logContent.classList.add('expanded');
                logToggle.textContent = 'Hide';
            }
        }

        // Initialize page
        window.onload = async function() {
            displayProjects();
            displayLogs();
            await logActivity('Page Loaded', 'User accessed the page');
        };
    </script>
</body>
</html>